se puede utilizar work.(nobre del archivo vhdl principal) para evitar declarar componentes, el programa lo busca. Pero ene l archivo principal debemos declarar LIBRARY work;
con work

architecture test of Multiplicadorbench is
    -- Señales internas para conectar al DUT
    signal A0, A1, B0, B1 : std_logic := '0';
    signal P0, P1, P2, P3 : std_logic;
begin
    -- Instanciación directa del DUT (Device Under Test)
    uut: entity work.MultiplicadorBlock2
        port map (
            A0 => A0,
            A1 => A1,
            B0 => B0,
            B1 => B1,
            P0 => P0,
            P1 => P1,
            P2 => P2,
            P3 => P3
        );

    -- Proceso de estímulo

sin work

architecture test of Multiplicadorbench is
    -- Declaración del componente (igual a la entidad del DUT)
    component MultiplicadorBlock2
        port(
            A0, A1, B0, B1 : in std_logic;
            P0, P1, P2, P3 : out std_logic
        );
    end component;

    -- Señales internas para conectar
    signal A0, A1, B0, B1 : std_logic := '0';
    signal P0, P1, P2, P3 : std_logic;
begin
    -- Instanciación del componente (sin “work”)
    uut: MultiplicadorBlock2
        port map (
            A0 => A0,
            A1 => A1,
            B0 => B0,
            B1 => B1,
            P0 => P0,
            P1 => P1,
            P2 => P2,
            P3 => P3
        );

    -- Proceso de estímulo

La forma moderna (entity work) funciona perfecto también, pero a veces da errores de compatibilidad en versiones antiguas del compilador.